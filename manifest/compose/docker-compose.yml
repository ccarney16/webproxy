version: '3.8'
services:
  traefik:
    command:
    # Enable API and Dashboard
    - --api
    - --api.dashboard

    # Let's Encrypt Certificate Resolver
    - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL:-admin@example.com}
    - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/certs/acme/letsencrypt.json
    - --certificatesresolvers.letsencrypt.acme.httpchallenge
    - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http

    # Web Traffic
    - --entrypoints.http.address=:80
    - --entrypoints.http.http.middlewares=service_error@docker
    - --entrypoints.http.http.redirections.entryPoint.to=https
    - --entrypoints.http.http.redirections.entryPoint.scheme=https
    - --entrypoints.http.http.redirections.entryPoint.permanent=true
    - --entrypoints.http.http.redirections.entryPoint.priority=500

    # Secure Web Traffic
    - --entrypoints.https.address=:443
    - --entrypoints.https.http.tls=true
    - --entrypoints.https.http.middlewares=service_error@docker

    # Global Options
    - --global.checknewversion=${TRAEFIK_CHECK_UPDATES:-false}
    - --global.sendanonymoususage=${TRAEFIK_SEND_ANON_USAGE:-false}

    # Traefik Pilot
    - --pilot.dashboard=${TRAEFIK_ENABLE_PILOT:-false}

    # Allow Traefik to listen to docker API
    - --providers.docker
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedbydefault=false

    # Fallback to config files for misc functions
    - --providers.file
    - --providers.file.directory=/etc/traefik/file.d/
    - --providers.file.watch

    - ${TRAEFIK_CLI_OPTIONS:-}
    depends_on:
    - fallback
    image: traefik:v2.6
    network_mode: host
    privileged: true
    read_only: true
    restart: always
    volumes:
    - ./conf.d/traefik:/etc/traefik
    - /var/run/docker.sock:/var/run/docker.sock
  fallback:
    build:
      context: ./manifest/images/fallback
    labels:
    - traefik.enable=true

    # Enable the API for traefik
    - traefik.http.routers.api.rule=Host(`${HOSTNAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
    - traefik.http.routers.api.service=api@internal
    - traefik.http.routers.api.middlewares=api-auth,client_error
    
    # Default Host for traefik.
    - traefik.http.routers.default.rule=Host(`${HOSTNAME}`) && PathPrefix(`/`)
    - traefik.http.routers.default.priority=2
    - traefik.http.routers.default.middlewares=client_error,default_host_header

    # Catch-all for all traffic
    - traefik.http.routers.fallback.rule=PathPrefix(`/`)
    - traefik.http.routers.fallback.priority=1
    - traefik.http.routers.fallback.middlewares=client_error

    - traefik.http.services.fallback.loadbalancer.server.port=80

    # Error Handling
    - traefik.http.middlewares.client_error.errors.status=400-499
    - traefik.http.middlewares.client_error.errors.service=fallback
    - traefik.http.middlewares.client_error.errors.query=/{status}
    - traefik.http.middlewares.service_error.errors.status=500-599
    - traefik.http.middlewares.service_error.errors.service=fallback
    - traefik.http.middlewares.service_error.errors.query=/{status}

    # API Authentication
    - traefik.http.middlewares.api-auth.basicauth.usersfile=/etc/traefik/api.auth
    - traefik.http.middlewares.redirect_https.redirectscheme.scheme=https
    - traefik.http.middlewares.redirect_https.redirectscheme.permanent=true

    # Change Host header to fallback
    - traefik.http.middlewares.default_host_header.headers.customrequestheaders.Host=default
    restart: always
