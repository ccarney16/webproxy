#!/bin/bash

###
# cdeploy - deploys a docker-compose project
###


## VARIABLES
_deploy_dir=manifest/deploy
_install_dir=${_deploy_dir}/install
_override_dir=${_deploy_dir}/overrides
_template_dir=${_deploy_dir}/templates

config_name=""
dotenv_environment=()
force=false
enabled_services=""
no_symlink=false

# Functions

# Returns the help message
function _return_help {
    echo ""
    echo "Docker Compose Deployment Script"
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo ""
    echo " --help, -h               - returns this screen"
    echo " --force, -f              - force overwrite deployment"
    echo " --available-profiles     - lists available profiles in a config"
    echo " --available-configs      - returns a list of available configs."
    echo " --enable-profiles, -p    - enables selected profiles (ex. 'debug' or 'debug,dev')"
    echo " --config, -c             - selects a different configuration to be used for deployment"
    echo " --no-symlink, -s         - Copies the docker-compose file instead of symlinking"
    echo " --environment, -e        - modifies a compose environment variable"
    echo ""
}

# Used to embed this script into a project directory under bin/
function embed_cdeploy {
    if ! [ -f bin/deploy ]; then
        printf "Embedding cdeploy into current project.\n"
        mkdir -p bin
        cp "$0" bin/deploy

        printf "cdeploy added to project.\n"
    else
        printf "A script called bin/deploy already exists! Please remove this script manually before trying to add me to this project...\n"
    fi
}

function deploy_project {
    >&2 printf "Building configuration using '$config_name' as base...\n"

    # Notify the user that they will be overriding parts of the deployment
    if [ -f docker-compose.yml ]; then
        printf "Warning! This project is already deployed! Redeploying will override certain configuration files.\n"
        read -p "Please make sure you have a proper backup of this project. Do you wish to continue (y/N)? " yn
        if ! [[ ${yn,,} == y* ]]; then
            exit
        fi
    fi

    type pre_deploy &>/dev/null && pre_deploy

    # Remove old symlink and make new one
    rm -rf docker-compose.yml

    if [ "${no_symlink}" == "true" ]; then
        cp "${_template_dir}/${config_name}.yml" docker-compose.yml
    else
        ln -s "${_template_dir}/${config_name}.yml" docker-compose.yml
    fi

    # Copy configuration 
    printf "Copying base configuration.\n"
    cp -rnv ${_install_dir}/* .


    printf "Deploying any config overrides.\n"
    if [ -d ${_override_dir}/${config_name}/ ]; then
        cp -rfv ${_override_dir}/${config_name}/* .
    elif [ -d ${_override_dir}/default/ ]; then
        cp -rfv ${_override_dir}/default/* .
    fi

    printf "Applying compose environment.\n"
    if ! [ -f .env ]; then
        printf "## Project environment configuration ##\n#\n" >> .env
        printf "#  This file contains environment configuration for a docker compose project.\n" >> .env
        printf "#  Please do not configure this file unless you know what you are doing!\n\n" >> .env
    fi

    # prepend some defaults to the dotenv_environment.
    default_environment=(
        "COMPOSE_PROFILES=${enabled_profiles}")
    dotenv_environment=("${default_environment[@]}" "${dotenv_environment[@]}")

    for entry in ${dotenv_environment[@]}; do
        read -d "=" -rasplit<<< "$entry"
        if grep -q "^${split[0]}=" .env; then
            sed -i "s|${split[0]}=.*|${entry}|" .env
        else
            echo "${entry}" >> .env
        fi
    done

    ## Post Deployment execution
    type post_deploy &>/dev/null && post_deploy

}

function display_profiles {
    printf "Available Profiles for '${config_name}' config: "
    docker-compose --project-directory ${_install_dir} -f ${_template_dir}/${config_name}.yml config --profiles | tr '\n' ' '
    printf '\n'
}

function display_configs {
    printf "Available Configs: "
    find ${_template_dir} -name '*.yml' -exec basename {} \; | sed -e 's/\.yml$//' | tr '\n' ' '
    printf "\n"
}

# Fixing some nonsense with function returning
IFS=

if [ ! -f ${_deploy_dir}/deploy.conf ]; then
    printf "Missing manifest/deploy/deploy.conf (Is this a deployable project?)!\n"
    exit
fi

# Enable defaults
. ${_deploy_dir}/deploy.conf

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" == -* ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            --available-profiles)
                display_profiles
                exit
                ;;
            --available-configs)
                display_configs
                exit
                ;;
            --config | -c)
                ((i++))
                config_name="${!i}"
                ;;
            --enable-profiles | -p)
                ((i++))
                enabled_profiles="${!i}"
                ;;
            --environment | -e)
                ((i++))
                dotenv_environment+=("${!i}")
                ;;
            # Embeds this script into a project
            --embed)
                embed_cdeploy
                exit
                ;;
            --force | -f)
                force=true
                ;;
            --no-symlink)
                no_symlink=true
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done


if ! [ -f "${_template_dir}/${config_name}.yml" ]; then
    printf "Config '${config_name}' does not exist! Exiting...\n"
    exit
fi

deploy_project
